## CHAPTER 02 _ 객체지향 프로그래밍

### 01. 영화 예매 시스템
```
예시로든 영화 예매 시스템에서의 단어 정의
영화 : 영화에 대한 기본 정보를 표현
상영 : 상영은 실제로 관객들이 영화를 관람하는 사건을 표현
할인 조건 : 가격의 할인 여부를 결정
    순서 조건 : 상영 순번을 이용해 할인 여부를 결정하는 규칙
    기간 조건 : 상영 시간을 이용해 할인 여부를 결정하는 규칙
할인 정책 : 
```

### 02. 객체지향 프로그래밍을 향해
#### 협력, 객체, 클래스
> 객체지향은 객체를 지향하는 것

* 객체는 상태와 행동을 함께 가지는 복합적인 존재
* 객체는 스스로 판단하고 행동하는 자율적인 존재

객체지향 패러다임으로의 전환을 위한 프로그래밍포인트는 다음과 같다.
1. 어떤 클래스가 필요한지를 고민하기 전에 어떤 객체들이 필요한지 고민하라
    > 어떤 객체들이 어떤 상태와 행동을 가지는지를 먼저 결정해야 한다. 
2. 각체를 독립적인 존재가 아니라 기능을 구현하기 위해 협력하는 공동체의 일원으로 봐야한다.
   > 다른 각체에게 도움을 주거나 의존하면서 살아가는 협력적인 존재이다.
   
#### 도메인의 구조를 따르는 프로그램 구조
> 도메인 : 문제를 해결하기 위해 사용자가 프로그램을 사용하는 분야

* 객체지향 패러다임이 강력한 이유
    : 요구사항을 분석하는 초기 단계부터 프로그램을 구현하는 마지막 단계까지 객체라는 동일한 추상화 기법을 사용할 수 있기 떄문
* 일반적으로 클래스의 이름은 대응되는 도메인 개념의 이름과 동일하거나 적어도 유사하게 짓는다.

#### 클래스 구현하기
> 클래스를 구현하면서 중요한 것은 클래스의 경계를 구분 짓는 것
> 클래스는 내부(private)와 외부(public)로 구분됨
> 훌륭한 클래스를 설계하기 위한 핵심은 어떤 부분을 외부에 공개하고 어떤부분을 감출지를 결정하는 것

* 클래스의 내부와 외부를 구분해야 하는 이유는?
  * 경계의 명확성이 객체의 자율성을 보장하기 떄문
  * 프로그래머에게 구현의 자유를 제공
  
#### 자율적인 객체
> 객체의 중요한 2가지 사실
> 1.객체가 상태와 행동을 함께 가지는 복합적인 존재
> 2.객체가 스스로 판단하고 행동하는 자율적인 존재

* 객체지향 이전의 패러다임
  : 데이터와 기능이라는 독립적인 존재를 서로 였어 프로그래밍 구성
* 객체지향
  : 객체라는 단위 안에서 데이터와 기능을 한덩어리로 묶음 -> '캡슐화'

> 객체의 내부에 대한 접근을 통제하는 이유는 객체를 자율적인 존재로 만들기 위해서
- 객체지향의 핵심은 스스로 상태를 관리하고, 판단하고, 행동하는 자율적인 객체들의 공동체를 구성하는 것
- 객체가 자율적인 존재가 되기위해서는 외부간섭을 최소화 해야한다.

* 캡슐화와 접근 제어는 객체를 두 부분으로 나눈다.
  * 퍼블릭 인터페이스 : 외부에서 접근 가능한 부분
  * 구현 : 오직 내부에서만 접근 가능한 부분
  > 인터페이스와 구현의 분리 원칙은 훌륭한 객체지향 프로그래밍의 원칙
  
#### 프로그래머의 자유
> 프로그래머의 역할은 클래스 작성자와 클라이언트 프로그래머로 구분하는 것이 유용
> 클래스 작성자 
>   : 새로운 데이터 타입을 프로그램에 추가
>   : 클라이언트 프로그래머에게 필요한 부분만 공개하고 나머지는 숨겨야 한다.
> 클라이언트 프로그래머 
>   : 클래스 작성자가 추가한 데이터 타입을 사용
>   : 필요한 클래스들을 역어서 애플리케이션을 빠르고 안정적으로 구축하는 것

클라이언트 프로그래머가 숨겨 놓은 부분에 마음대로 접근할 수 업도록 방지함으로써 클라이언트 프로그래머에 대한 영향을 걱정하지 않고도 내부 구현을 마음대로 변경할수 있다.
 = 구현은닉

* 구현은닉은 클라이언트 프로그래머와 클래스 작성자 모두에게 유용한 개념
  * 클래스 작성자 : 인터페이스를 바꾸지 않는 한 외부에 미치는 영향을 걱정하지 않고도 내부 구현을 마음대로 변경할 수 있다.
  * 클라이언트 프로그래머 : 내부의 구현은 무시한 채 인터페이스만 알고 있어도 클래스를 사용할 수 있다.
  
#### 협력하는 객체들의 공통체
> 협력 : 시스템의 어떤 기능을 구현하기 위해 객체들 사이에 이뤄지는 상호작용

### 03. 할인 요금 구하기
#### 할인 요금 계산을 위한 협력 시작하기
> 객체지향의 중요한 개념 : 상속, 다형성 그리고 추상화

#### 할인 정책과 할인 조건
> Template method pattern : 부모클래스에 기본적인 알고리즘의 흐름을 구현하고 중간에 필요한 처리를 자식 클래스에 위임하는 디자인 패턴

> 오버라이딩과 오버로딩
> 오버라이딩 : 부모 클래스에서 정의된 같은 이름, 같은 파라이터 목록을 가진 메서드를 자식 클래스에서 재정의 하는 경우
> 오버로딩 : 메서드의 이름은 같지만 제공되는 파라미터의 목록이 다른 경우

#### 할인 정책 구성하기

### 04. 상속과 다형성
#### 컴파일 시간 의존성과 실행 시간 의존성
> 컴파일 시간 의존성과 실행 시간 의존성은 서로 다를 수 있다.
> 두 의존성이 다를 수 록 코드를 이해하기 어려워진다 반면에 코드는 더욱 유연해지고 확장 가능해진다.

#### 차이에 의한 프로그래밍
> 차이에 의한 프로그래밍 : 부모 클래스와 다른 부분만을 추가해서 새로운 클래스를 쉽고 빠르게 만드는 방법

#### 상속과 인터페이스
> 상속이 가치있는 이유
> : 부모 클래스가 제공하는 모든 인터체이스를 자식 클래스가 물려받을 수 있기 때문
> 인터페이스
> : 객체가 이해할 수 있는 메시지의 목록을 정의

> 업캐스팅 : 자식클래스가 부모클래스를 대신하는 것

#### 다형성
> 다형성 
> : 동일한 메세지를 전송하지만 실제로 어떤 메서드가 실행될 것인지는 메시지를 수신하는 객체의 클래스가 무엇이냐에 따라 달라짐
> : 다형성은 객체지향 츠로그램의 컴파일 시간 의존성과 실행 시간 의존성이 다를 수 있다는 사실을 기반으로 한다.
> : 다형적인 협력에 참여하는 객체들은 모두 같은 메세지를 이해할 수 있어야 한다.
> : 동일한 인터페이스를 갖는다.

#### 인터페이스와 다형성

### 05. 추상화와 유연성
#### 추상화의 힘
* 추상화의 장점
  * 추상화의 계층만 따로 떼어 놓고 살펴보면 요구사항의 정책을 높은 수준에서 서술할 수 있다.
    * 세부적인 내용을 무시한 채 상우 정책을 쉽고 간단하게 표현할 수 있다.
  * 추상화를 이용하면 설계가 좀 더 유연해진다.
    * 기존 구조를 수정하지 않고도 새로운 기능을 쉽게 추가하고 확장할 수 있다.

#### 유연한 설계
* 책임의 위치를 결정하기 위해 조건문을 사용하는 것은 협력의 설계 측면에서 대부분의 경우 좋지 않은 선택이다.
* 항상 예외 케이스를 최소화 하고 일관성을 유지할 수 있는 방법을 선택하라.
> 유연성이 필요한 곳에 추상화를 사용하라

#### 추상 클래스와 인터페이스 트레이드오프

#### 코드 재사용
* 상속은 코드를 재사용하기 위해 널리 사용되는 방법
* 상속보다 합성이 코드 재사용에는 더 좋은 방법

#### 상속
* 상속이 설계 관점에서 안좋은 영향을 미친다.
  * 캡슐화를 위반한다.
    * 상속을 위해서는 부모클래스의 내부 구조를 잘 알고 있어야 한다. -> 부모클래스를 자식클래스에게 노출 -> 캡슐화가 약해짐
  * 설계를 유연하지 못하게 한다.
    * 부모 클래스와 자식 클래스 사이의 관계를 컴파일 시점에 결정 -> 실행 시점에 객체의 종류를 변경하는 것이 불가능
  * 상속보다 인스턴스 변수로 관곌ㄹ 연결한 원래의 설계가 더 유연하다.

#### 합성
> 합성 : 인터페이스에 정의된 메시지를 통해서만 코드를 재사용하는 방법

* 합성은 상속이 가지는 두 가지 문제점을 모두 해결한다.
  * 인터체이스에 정의된 메시지를 통해서만 재사용이 가능하기 때문에 구현을 효과적으로 캡슐화할 수 있다.
  * 의존하는 인스턴스를 교체하는 것이 비교적 쉽기 때문에 설계를 유연하게 만든다.

-> 따라서 코드 재사용을 위새서는 상속보다는 합성을 선호하는 것이 더 좋은 방법이다.






