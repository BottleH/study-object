## 06. 메시지와 인터페이스
클래스라는 구현 도구에 지나치게 집착하면 경직되고 유연하지 못한 설계에 이를 확률이 높아진다.
훌륭한 객체지향 코드를 얻기 위해서는클래스가 아니라 객체를 지향해야 한다.

### 01. 협력과 메시지
#### 클라이언트-서버 모델
> 클라이언트 - 서버 모델 : 구 객체 사이의 협력 관계를 설명하기 위해 사용하는 전통적인 메타포
> 클라이언트 : 협력안에서 메세지를 전송하는 개체
> 서버 : 협력안에서 메세지를 수신하는 객체
> 협력 : 클라이언트 -> 서버 서비스를 요청하는 단방향 상호작용

객체가 독립적으로 수행할 수 있는 것 보다 더 큰 책임을 수행하기 위해서는 다른 객체와 협력해야한다.

#### 메시지와 메시지 전송
* 메시지 : 객체들이 협력하기 위해 사용할 수 있는 유일한 의사 소통 수단
  * 메시지는 오퍼레이션명과 인자로 구성
* 메시지 전송 : 한 객체가 다른 객체에게 도움을 요충하는 것 (= 메시지 패싱)
  * 메시지 전송은 메시지에서 메시지 수신자를 추가한 것
* 메시지 전송자 : 메시지를 전송하는 객체
* 메시지 수신자 : 메시지를 수신하는 객체

#### 메시지와 메서드
메시지를 수신했을 떄 실제로 어떤 코드가 실행되는지는 메시지 수신자의 실제 타입이 무엇인가에 달려있다.

* 메서드 : 메시지를 수신 했을 때 실제로 실행되는 함수 또는 프로시저

#### 퍼블릭 인터체이스와 오퍼레이션
객체는 안과 밖을 구분하는 뚜렸한 경계를 가진다.

* 퍼블릭 인터페이스 : 객체가 의사소통을 위해 외부에 공개하는 메시지의 집합
* 오퍼레이션 : 프로그래밍 언어의 관점에서 퍼블릭 인터체이스에 포함된 메시지
            수행 가능한 어떤 행동에 대한 추상화

#### 시그니처
* 시그니처 : 오퍼레이션의 이름과 파라미터 목록을 합쳐 시그니처라고 부른다.

### 02. 인터페이스와 설게 품질
좋은 인터페이스는 최소한의 인터페이스와 추상적인 인터페이스라는 조건을 만족해야 한다.
- 최소한의 인터페이스 : 꼭 필요한 오처레이션만을 인터페이스에 포함
- 추상적인 인터페이스 : 무엇을 하는지를 표현

#### 디미터 법칙
> 협력하는 객체의 내부 구조에 대한 결함으로 인해 발생하는 설계 문제를 해결하기 위해 제안된 원칙
> 객체 내부 구조에 강하게 결합되지 않도록 협력 경로를 제한하는 것

- 디미터 법칙을 따르기 위해서는 클래스가 특정한 조건을 만족하는 대상에게만 메시지를 전송하도록 프로그래밍 해야 한다.
- 디미터 법칙을 따르면 부끄럼타는 코드를 작성할 수 있다.
> 부끄럼 타는 코드
> : 불필요한 어떤 것도 다른 객체에게 보여주지 않으며, 다른 객체의 구현에 의존하지 않는 코드를 말한다.
- 디미터 법칙을 따르면 메시지 전송자는 더 이상 메시지 수신자의 내부 구조에 관해 묻지 않게된다. (= 기차충돌 x)
- 디미터 법칙은 객체가 가지 가신을 책임지는 자율적인 존재여야 한다는 사실을 강조한다.

#### 묻지 말고 시켜라
* 묻지 말고 시켜라 원칙을 따르면 밀접하게 연관된 정보와 행동을 함께 가지는 객체를 만들 수 있다.
* 묻지 말고 시켜라 원칙을 따르면 객체의 정보를 이용하는 행동을 객체의 외부가 아닌 내부에 위치시키기 때문에 자연스럽게 정보와 행동을 동일한 크래스 안에 두게된다.

#### 의도를 드러내는 인터페이스
* 의도를 드러내는 인터페이스는 어떻게 하느냐가 아니라 무엇을 하느냐에 다라 메서드의 이름을 짓는 패턴이다.
> 켄트 백의 메서드를 명명하는 두 가지 방법
> 1.메서드가 작업을 어떻게 수행하는지를 나타내도록 이름 짓는 것
> 2.'어떻게'가 아니라 '무엇'을 하는지를 드러내는 것

#### 함께 모으기
근본적으로 디미터 법칙을 위한하는 설계는 인터체이스와 구현의 분리 원칙을 위반한다.

### 03. 원칙의 함정
#### 디미터 법칙은 하나의 도트(.)를 강제하는 규칙이 아니다.
디미터 법칙을 결합도와 관련된 것이며, 이 결합도가 문제가 되는 것은 객체의 내부 구조가 외부로 노출되는 경우로 한정된다.
하나이상의 도트(.)를 사용하는 모든 케이스가 다 디미터 법칙 위반인 것은 아니다.

#### 결합도와 응집도의 충돌
위임 메서드를 통해 객체 내부 구조를 감추는 것은 협력에 참여하는 객체들의 결합도를 낮출 수 있는 동시에 객체의 응집도를 높일 수 있는 가장 효과적인 방법이다.
하지만 맹목적으로 수행하는것은 결과적으로 객체는 상관없는 책임들을 한꺼번에 떠안게 되기 때분에 결과적으로 응집도가 낮아진다.

### 04. 명령-쿼리 분리 원칙
* 루틴 : 어떤 절차를 묶어 오출 가능하도록 이름을 부여한 기능 모듈
* 프로시저 : 정해진 절차에 따라 내부의 상태를 변경하는 루틴의 한 종류 (개념적으로 '명령'과 동일)
* 함수 : 어떤 절차에 따라 필요한 값을 계산해서 반환하는 루틴의 한 종류 (개념적으로 '쿼리'와 동일)

> 명령-쿼리 분리 원칙의 핵심은 오퍼레이션은 부수효과를 발생시키는 명령이거나 부수효과를 발생시키지 않는 쿼리 주 ㅇ하나여야 한다는것.
> 어떤 오퍼레이션도 명령인 동시에 커리여서는 안 된다.

명령-쿼리 인터페이스 : 명령-쿼리 분리 원칙에 따라 작성된 객체의 인터페이스를 부르는 말

#### 반복 일정의 명령과 쿼리 분리하기
부수효과를 가지는 대신 값을 반환하지 않는 명령과, 부수효과를 가지지 않는 대신 값을 반환하는 쿼리가 분리되면 
코드는 예측 가능하고 이해하기 쉬우며 디버깅이 용이한 동시에 유지보수가 수월해진다.

#### 명령-쿼리 분리와 참조 투명성
* 참조 투명성 : 어떤 표현식 e가 있을 때 e의 갑으로 e가 나타나느 모든 위치를 교체하더라고 결과가 달라지지 않는 특성

#### 책임에 초점을 맞춰라
훌륭하나 메시지를 얻기 위한 출발점은 책임 주도 설꼐 원칙을 따르는 것
책임 주도 설계에서는 객체가 메시지를 선택하는 것이 아니라 메시지가 객체를 선택하기 때무에 협력에 적합한 메시지를 결정할 수 있는 확률이 높아 진다.
