## 04. 설계 품질과 트레이드오프

### 01. 데이터 중시의 영화 예매 시스템
* 객체지향 설계에서의 시스템을 객체로 분할할 수 있는 두가지 방법
1. 상태를 분할의 중심축으로 삼는 방법
> 상태 중심의 관점에서 객체는 자신이 포하마고 있는 데이터를 조작하는 데 필요한 오퍼레이션을 정의한다.
> 상태 중심의 관점은 객체의 상태에 초점을 맞춘다.
> 객체를 독립된데이터 덩어리로 바라본다.

2. 책임을 분할의 중심축으로 삼는 방법
> 책임 중심의 관점에서 객체는 다른 객체가 요청할 수 있는 오퍼레이션을 위해 필요한 상태를 보관한다.
> 채김 중심의 관점은 객체의 행동에 초점을 맞춘다.
> 객체를 협력하는 공동체의 일원으로 바라본다.

* 결론 : 훌륭한 객체지향 설계는 데이터가 아니라 책임에 초점을 맞춰야 한다.
* 이유 : 변경과 관련이 있음
  * 객체의 상태는 구현에 속함
  * 구현에 관한 세부사항이 객체의 인터페이스에 스며들게 되어 캡슐화의 원칙이 무너짐
  * 데이터(=상태)에 초점을 맞추는 설계는 변경에 취약할 수밖에 없음
  
#### 데이터를 준비하자
- 데이터(상태) 중심의 설계란 객체 내부에 저장되는 데이터를 기반으로 시스템을 분할하는 방법
- 데이터 중심의 설계는 객체가 내부에 저장해야 하는 '데이터가 무엇인가'를 묻는 것으로 시작
- 캡슐화를 달성하기위한 방법으로는 접근자(내부의 데이터를 반환하는)와 수정자(데이터를 변경하는)를 추가하는 방법이 존재

#### 영화를 예매하자

### 02. 설계의 트레이드오프
#### 캡슐화
> 상태와 행동을 하나의 객체 안에 모으는 이유는 객체의 내부 구혀을 외부로부터 감추기 위해서다.
> *구현 : 나중에 변경될 가능성이 높은 어떤 것
> *인터페이스 : 상대적으로 안정적인 부분

* 객체지향이 강력한 이유
  * 한 곳에서 일어난 변경이 전체 시스템에 영향을 끼치지 않도록 파급효과를 적절하게 조절할 수 있는 장치를 제공하기 때문이다.
  * 객체를 사용하면 변경 가능성이 높은 부분은 내부에 숨기고 외부에는 사애적으로 안정적인 부분만 공개함으로써 변경의 여파를 통제할 수 있다.

* 객체지향에서 가장 중요한 원리
  * 캡슐화
    * 외부에서 알 필요가 없는 부분을 감춤으로써 대상을 단순화하는 추상화의 한 종류
  * 불안정한 구현 세부사항을 안정적인 인터페이스 뒤로 캡슐화 하는 것

#### 응지도와 결함도
* 응집도
  * 모듈에 폼함된 내부 요소들이 연관돼 있는 정도를 나타냄
  * 객체지향의 관점에서 응집도는 객체 또는 클래스에 얼마나 관련 높은 책임들을 할당했는지를 나타냄
  
* 결합도
  * 의존성의 정도를 나타냄
  * 다른 모듈에 대해 얼마나 많은 지식을 갖고 있느니를 나타내는 척도
  * 객체지향의 고나점에서 결합도는 객체 또는 클래스가 협력에 필요한 적절한 수준의 관게만을 유지하고 있는지를 나타낸다.
  
일반적으로 좋은 설계란 높은 응집도와 낮은 결합도를 가진 모듈로 구성된 설계를 의미함
그 이유는 설계를 변경하기 쉽게 만들기 때문이다.
* 캡슐화의 정도가 응집도와 결합도를 결정

### 03. 데이터 중심의 영화 예매 시스템의 문제점
데이터 중심의 설계는 캡슐화를 위반하고 객체 내부 구현을 인터체이스의 일부로 만든다.
데이터 중심의 설계는 캡슐화를 위한하기 쉽기 떄문에 책임 중심의 설계에 베해 응집도가 낮고 결합도가 높은 객체들을 양산하게 될 가능성이 놉다.

#### 캡슐화 위반
설계할 댸 협력에 고민하지 않은면 캡슐화를 위반하는 과도한 접근자와 수정자를 가지게 되는 경향이 있다.
결과적으로 대부분의 내부 구현이 퍼블릭 인터체이스에 그대로 노출될 수밖에 없는 것, 그 결과 캡슐화의 원칙을 위반하는 변경에 취약한 설계를 얻게 됨

#### 높은 결합도
객체 내부의 구현이 객체의 인터페이스에 드러난다는 것은 클라이언트가 구현에 강하게 결합된다는 것을 의미한다.
강하게 결합된다는것은 어떤 객체를 변경하더라도 제어 객체를 함께 변경할 수 밖에 없다는 의미

#### 낮은 응집도
서로 다른 이유로 변경되는 코드가 하나의 모듈 안에 공존할 때 모듈의 응집도가 낮다고 말한다.
- 변경의 이유가 서로 다른 코드들을 하나의 모듈 안에 뭉쳐놓았기 때문에 변경과 아무 상관이 없는 코드들이 영향을 받게 된다.
- 하나의 요구사항 변경을 반영하기 위해 동시에 여러 모듈을 수정해야 한다.

### 04. 자율적인 객체를 향해
#### 캡슐화를 지켜라
객체는 스스로의 상태를 책임져야 하며 외부에서는 인터체이스에 정의된 메스드를 통해서만 상태에 접근할 수 있어야 한다.

#### 스스로 자신의 데이터를 책임지는 객체
우리가 상태외 행동을 객체라는 하나의 단위로 묶는 이유는 객체 스스로 자신의 상태를 처리할 수 있게하기 위해서이다.

### 05. 하지만 여전히 부족하다.
수정된 객체들이 여전히 부족한 이유

#### 캡슐화 위반
수정된 객체들은 자기 자신의 데이터를 스스로 처리한다.
하지만, 속성에 포함된 정보들을 외부로부터 파라미터로 전달 받는다. 
만약 속성의 데이터 타입이 변경된다면 외부로부터 전달받는 파라미터의 타입도 변경되어야 한다.
내부구현의 변경이 외부로 퍼져나가는 파급효과는 캡슐화가 부족하다는 명백한 증거이다.

#### 높은 결합도
캡슐화 위반으로 인해 내부 구현이 외부로 노출됐기 때문에 객체간 결합도는 높을 수밖에 없다.
인터페이스가 아닌 구현이 변경하는 경우에도 의존하는 다른 객체를 변경해야한다
그렇다는 말은 두 객체 사이의 결합도가 높다는것을 의민한다.

#### 낮은 응집도
하나의 변경을 수용하기 위해 코드의 여러 곳을 동시에 변경해야 한다는 것은 설계의 응집도가 낮다는 증거이다.

### 06. 데이터 중심 설계의 문제점
두 번째 설게가 변경에 유연하지 못한 이유는 캡슐화를 위반했기 때문이다.

* 데이터 중심의 설계가 변경에 취약한 이유
1. 데이터 중심의 설계는 본질적으로 너무 이른시기에 데이터에 관해 결정하도록 강요한다.
2. 데이터 중심의 설계에서는 협력이라는 문맥을 고려하지 않고 객체를 고립시킨 채 오퍼레이션을 결정한다.

#### 데이터 중심 설계는 객체의 행동보다는 상태에 초점을 맞춘다.
데이터 중심의 설계는 너무 이른 시기에 데이터에 대해 고민하기 때문에 캡슐화에 실패하게 된다.
객체의 내부 구현이 객체의 인터체이스를 어지럽히고 객체의 응집도와 결합도에 나쁜 영향을 미치기때문에 변경에 취약한 코드를 낳게 된다.

#### 데이터 중심 설계는 객체를 고리시킨 채 오퍼레이션을 정의하도록 만든다.
객체지향 애플리케이션을 구현한다는 것은 협력하는 객체들의 공동체를 구축한다는 것을 의미한다.
올바른 객체지향 설계의 무게 중심은 항상 객체의 내부가 아니라 외부에 맞춰져 있어야 한다.
데이터 중심 설계에서 초점은 객체의 외부가 아니라 내부로 향한다.
객체의 구현이 이미 결정된 상태에서 다른 객체와의 협력 방법을 고민하기 때문에 이미 구현된 객체의 인터체이스를 억지로 끼워맞출수밖에 없다.
