## 04. 설계 품질과 트레이드오프

### 01. 데이터 중시의 영화 예매 시스템
* 객체지향 설계에서의 시스템을 객체로 분할할 수 있는 두가지 방법
1. 상태를 분할의 중심축으로 삼는 방법
> 상태 중심의 관점에서 객체는 자신이 포하마고 있는 데이터를 조작하는 데 필요한 오퍼레이션을 정의한다.
> 상태 중심의 관점은 객체의 상태에 초점을 맞춘다.
> 객체를 독립된데이터 덩어리로 바라본다.

2. 책임을 분할의 중심축으로 삼는 방법
> 책임 중심의 관점에서 객체는 다른 객체가 요청할 수 있는 오퍼레이션을 위해 필요한 상태를 보관한다.
> 채김 중심의 관점은 객체의 행동에 초점을 맞춘다.
> 객체를 협력하는 공동체의 일원으로 바라본다.

* 결론 : 훌륭한 객체지향 설계는 데이터가 아니라 책임에 초점을 맞춰야 한다.
* 이유 : 변경과 관련이 있음
  * 객체의 상태는 구현에 속함
  * 구현에 관한 세부사항이 객체의 인터페이스에 스며들게 되어 캡슐화의 원칙이 무너짐
  * 데이터(=상태)에 초점을 맞추는 설계는 변경에 취약할 수밖에 없음
  
#### 데이터를 준비하자
- 데이터(상태) 중심의 설계란 객체 내부에 저장되는 데이터를 기반으로 시스템을 분할하는 방법
- 데이터 중심의 설계는 객체가 내부에 저장해야 하는 '데이터가 무엇인가'를 묻는 것으로 시작
- 캡슐화를 달성하기위한 방법으로는 접근자(내부의 데이터를 반환하는)와 수정자(데이터를 변경하는)를 추가하는 방법이 존재

#### 영화를 예매하자

### 02. 설계의 트레이드오프
#### 캡슐화
> 상태와 행동을 하나의 객체 안에 모으는 이유는 객체의 내부 구혀을 외부로부터 감추기 위해서다.
> *구현 : 나중에 변경될 가능성이 높은 어떤 것
> *인터페이스 : 상대적으로 안정적인 부분

* 객체지향이 강력한 이유
  * 한 곳에서 일어난 변경이 전체 시스템에 영향을 끼치지 않도록 파급효과를 적절하게 조절할 수 있는 장치를 제공하기 때문이다.
  * 객체를 사용하면 변경 가능성이 높은 부분은 내부에 숨기고 외부에는 사애적으로 안정적인 부분만 공개함으로써 변경의 여파를 통제할 수 있다.