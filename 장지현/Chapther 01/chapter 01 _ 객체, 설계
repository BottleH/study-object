## CHAPTER 01 _ 객체, 설계
로버트 L. 글래스는 <b>이론보다 실무가 먼저<b>라고 주장한다.
어떤 분야든 초기 단계에서는 아무것도 없는 상태에서 이론을 정립하기 보다는 실무를 관찰한 결과를 바탕으로 이론을 정립하는것이 최선이라고 주장한다.

### 01. 티켓판매 애플리케이션 구현하기
*예시 코드는 asis에 기록하겠습니다*

### 02. 무엇이 문제인가
> 모듈이란? (로버트 마틴 정의)
> 크기와 상관 없이 클래스나 패키지, 라이브러리와 같이 프로그램을 구성하는 임의의 요소를 의미
> > <모듈의 3가지 목적>
> > 1.실행중에 제대로 동작하는 것
> > 2.변경을 위해 존재하는 것
> > 3.코드를 읽는 사람과 의사소통하는 것

위의 마틴의 정의에 따르면 위 티켓판매 애플리케이션에는 2가지 문제점이 존재한다.
1. 변경 용이성
2. 읽는 사람과의 의사소통

#### 02.1 예상을 빗나가는 코드 (_ 코드를 읽는 사람과의 의사소통)
Theater 클래스의 enter 메서드가 수행하는 일을 말로 풀어보면 아래와 같다.
```
소극장은 관람개의 가방을 열어 그 안에 조대장이 들어 있는지 살펴본다. 
가방 안에 초대장이 들어 있으면 판매원은 매표소에 보관돼 있는 티켓을 관람객의 가방 안으로 옮긴다.
가방 안에 초대장이 들어 있지 않다면 관람객의 가방에서 티켓 금액만큼의 현금을 꺼내 매표소에 적립한 후에 매표소에 보관돼 있는 티켓을 관람객의 가방 안으로 옮긴다.
```
이 코드가 코드를 읽는 사람과 의사소통이 어려운 이유는 2가지 이다.
1. 현재의 코드는 우리의 상식과는 너무나도 다르게 동작한다. 
위 설명과 같이 소극장의 역할이 현실과는 너무 상이하다.
현실에서는 관람객과 판매웍이 소극장의 통제를 받는 소극적이고 수동적이 존재가 아니다.

2. 코드를 이해하기 위해서는 여러가지 세부적인 내용들을 한꺼번에 기억해야한다.
하나의 클래스나 메서드에서 너무 많은 세부사항을 다루기 떄문에 코드를 작성하는 사람뿐만 아니라 코드를 읽고 이해해야하는 사람 모두에게 큰 부담을 준다.

#### 02.2 변경에 취약한 코드
위 예시 코드는 지나치게 세부적인 사실에 의존해서 동작한다.
이것은 객체 사이의 의존성과 관련된 문제이다.
의존성이라는 말 속에는 어떤 객체가 변경도리 때 그 객체에게 의존하는 다른 객체도 함께 변경도리 수 있단는 사실이 내포돼 있다.
의존성이 과한 경우를 가리켜 결합도가 높다고 말한다.
그렇다고 의존성을 완전히 없애는 것이 정답은 아니다.
애플리케이션의 기능을 구현하는 데 필요한 최소한의 의존성만 유지하고 불필요한 의존성을 제거하는 것이다.

### 03. 설계 개선하기
#### 03.1 자율성을 높이자
예시코드에서 수동적인 존재였던 관람객, 판매원 등을 자율적인 존재로 만들어 개선
*개선 코드는 tobe에 기록하겠습니다*
개념적적이나 물리적으로 객체 내부의 세부적인 사항을 감추는 것을 캡슐화라고 한다.
객체 사이의 결합도를 낮추고 변경하기 쉬운 코드를 작성하기 위해 따라야 하는 가장 기본적인 설계 원칙은 인터페이스와 구현으로 나누고 인터페이스만 공개하는 방법이다.

#### 03.2 무엇이 개선됬는가
1. 개선된 코드는 우리의 상식과 일지하는대로 동작한다.
2. 내부 구현이 변경되더라도 관련된 코드를 모두 변경할 필요가 없다.
   관람객과 판매원의 내부 구현을 변경하더라고 소극장의 함께 변경할 필요가 없어졌다는 것

#### 03.3 어떻게 한 것인가
각 객체가 수행하는 모든 상세 동작을 객체 내부로 옮겼다.
자기 자신의 문제를 스스로 해결하도록 코드를 변경한 것
=> 객체의 자율성을 높이는 방향으로 설계 개선

#### 03.4 캡슐화와 응집도
핵심 개선 방향 : 객체 내부의 상태를 캡슐화하고 객체 간에 오직 메시지를 통해서만 상호작용하도록 만드는것

#### 03.5 절차지향과 객체지향
ex> 프로세스 : 소극장의 입장 method, 데이터 : 관람객, 판매원, 가방, 매표소

* 절차 지향 : 프로세스와 데이터를 별도의 모듈에 위치시키는 프로그래밍 방식
> 일반적으로 절차적 프로그래밍은 우리의 직관에 위배된다. (like 예시코드) -> 예상을 빗나가는 코드
> 데이터의 변경으로 인한 영향을 지역적으로 고립시키기 어렵다. -> 변경에 취약한 코드

* 객체 지향 : 데이터와 프로세스가 동일한 모듈 내부에 위치하도록 프로그래밍 하는 방식
> 캡슐화를 이용해 의존성을 적절히 관리함으로써 객체 사이의 결합도를 낮추는것. -> 변경에 용이한 코드
> 직관에 위배되지 않아 이해하기 쉬움 -> 예상을 밧나가지 않는 코드

#### 03.6 책임의 이동
절차 지향과 객체 지향의 근본적인 차이는 책임의 이동이라고 할 수 있다.
여기서 '책임'은 기능을 가리키는 객체지향의 용어로 생각해도 무방하다.

#### 03.7 더 개선할 수있다


### 04. 객체지향 설계
[설계란 코드를 배치하는 것이다.]
설계는 코드를 작성하는 매 순간 코드를 어떻게 배치할 것인지를 결정하는 과정에서 나온다.
설계는 코드 작성의 일부이며 코드를 작성하지 않고서는 검증할 수 없다.

좋은 설계란 두가지 요구사항을 만족시킨 설계이다.
1. 요구하는 기능을 온전히 수행하는것
2. 내일의 변경을 매끄럽게 수용할 수 있는 설계

