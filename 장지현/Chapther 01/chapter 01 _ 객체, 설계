## CHAPTER 01 _ 객체, 설계
로버트 L. 글래스는 <b>이론보다 실무가 먼저<b>라고 주장한다.
어떤 분야든 초기 단계에서는 아무것도 없는 상태에서 이론을 정립하기 보다는 실무를 관찰한 결과를 바탕으로 이론을 정립하는것이 최선이라고 주장한다.

### 01. 티켓판매 애플리케이션 구현하기

### 02. 무엇이 문제인가
> 모듈이란? (로버트 마틴 정의)
> 크기와 상관 없이 클래스나 패키지, 라이브러리와 같이 프로그램을 구성하는 임의의 요소를 의미
> > <모듈의 3가지 목적>
> > 1.실행중에 제대로 동작하는 것
> > 2.변경을 위해 존재하는 것
> > 3.코드를 읽는 사람과 의사소통하는 것

위의 마틴의 정의에 따르면 위 티켓판매 애플리케이션에는 2가지 문제점이 존재한다.
1. 변경 용이성
2. 읽는 사람과의 의사소통

#### 02.1 예상을 빗나가는 코드 (_ 코드를 읽는 사람과의 의사소통)
Theater 클래스의 enter 메서드가 수행하는 일을 말로 풀어보면 아래와 같다.
```
소극장은 관람개의 가방을 열어 그 안에 조대장이 들어 있는지 살펴본다. 
가방 안에 초대장이 들어 있으면 판매원은 매표소에 보관돼 있는 티켓을 관람객의 가방 안으로 옮긴다.
가방 안에 초대장이 들어 있지 않다면 관람객의 가방에서 티켓 금액만큼의 현금을 꺼내 매표소에 적립한 후에 매표소에 보관돼 있는 티켓을 관람객의 가방 안으로 옮긴다.
```
이 코드가 코드를 읽는 사람과 의사소통이 어려운 이유는 2가지 이다.
1. 현재의 코드는 우리의 상식과는 너무나도 다르게 동작한다. 
위 설명과 같이 소극장의 역할이 현실과는 너무 상이하다.
현실에서는 관람객과 판매웍이 소극장의 통제를 받는 소극적이고 수동적이 존재가 아니다.

2. 코드를 이해하기 위해서는 여러가지 세부적인 내용들을 한꺼번에 기억해야한다.
하나의 클래스나 메서드에서 너무 많은 세부사항을 다루기 떄문에 코드를 작성하는 사람뿐만 아니라 코드를 읽고 이해해야하는 사람 모두에게 큰 부담을 준다.

#### 02.2 변경에 취약한 코드




### 03. 설계 개선하기

### 04. 객체지향 설계
